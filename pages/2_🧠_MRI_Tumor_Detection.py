import streamlit as st
from utils.brain_utils import detect_tumor  # –¢–µ–ø–µ—Ä—å classify_slice –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
from PIL import Image
import requests
from io import BytesIO

st.title("üß† –°—Ä–µ–∑—ã –º–æ–∑–≥–∞ –∏ –¥–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–∏")

tab1, tab2 = st.tabs(["–°–µ—Ä–≤–∏—Å", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"])

with tab1:
    source = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", ["–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "–°—Å—ã–ª–∫–∞ (URL)"])

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Ä–µ–∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    slice_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ä–µ–∑–∞", ["Axial", "Sagittal", "Coronal"])
    slice_type = slice_type.lower()  # –ù—É–∂–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å detect_tumor()

    if source == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤":
        uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ MRI —Å—Ä–µ–∑—ã", type=['jpg', 'jpeg', 'png'], accept_multiple_files=True)
        for file in uploaded_files:
            image = Image.open(file)
            detection_image = detect_tumor(image, slice_type)
            st.image(
                detection_image,
                caption=f"{slice_type.upper()} —Å—Ä–µ–∑ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç YOLO",
                use_container_width=True
            )
    else:
        url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ"):
            try:
                response = requests.get(url)
                image = Image.open(BytesIO(response.content))
                detection_image = detect_tumor(image, slice_type)
                st.image(
                    detection_image,
                    caption=f"{slice_type.upper()} —Å—Ä–µ–∑ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç YOLO",
                    use_container_width=True
                )
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

with tab2:
    st.subheader("YOLOv12m –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–ø—É—Ö–æ–ª–∏")
    st.markdown("- 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö YOLOv12m –º–æ–¥–µ–ª–∏ (–ø–æ —Ç–∏–ø—É —Å—Ä–µ–∑–∞)")
    st.markdown("- **–≠–ø–æ—Ö**: 50 (—É –∫–∞–∂–¥–æ–π)")

    with st.expander("üìä Axial ‚Äî –ú–µ—Ç—Ä–∏–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞"):
        st.image("assets/ax_data.png", caption="Data ‚Äî Axial")
        st.image("assets/confusion_ax.png", caption="Confusion Matrix ‚Äî Axial")
        st.image("assets/pr_ax.png", caption="PR Curve ‚Äî Axial")

    with st.expander("üìä Coronal ‚Äî –ú–µ—Ç—Ä–∏–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞"):
        st.image("assets/data_cor.png", caption="Data ‚Äî Coronal")
        st.image("assets/confusion_cor.png", caption="Confusion Matrix ‚Äî Coronal")
        st.image("assets/pr_cor.png", caption="PR Curve ‚Äî Coronal")

    with st.expander("üìä Sagittal ‚Äî –ú–µ—Ç—Ä–∏–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞"):
        st.image("assets/data_sag.png", caption="Data ‚Äî Sagittal")
        st.image("assets/conf_sag.png", caption="Confusion Matrix ‚Äî Sagittal")
        st.image("assets/pr_sag.png", caption="PR Curve ‚Äî Sagittal")
