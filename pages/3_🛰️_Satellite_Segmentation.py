import streamlit as st
from utils.unet_utils import run_unet_segmentation
from PIL import Image
import requests
from io import BytesIO

st.set_page_config(page_title="–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤", page_icon="üõ∞Ô∏è")
st.title("üõ∞Ô∏è –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤ (U-Net)")

tab1, tab2 = st.tabs(["–°–µ—Ä–≤–∏—Å", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"])

with tab1:
    st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    source = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–£–∫–∞–∑–∞—Ç—å URL"])

    if source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è)", type=["jpg", "jpeg", "png"], accept_multiple_files=True)
        if uploaded_files:
            for file in uploaded_files:
                image = Image.open(file).convert("RGB")
                mask = run_unet_segmentation(image)

                col1, col2 = st.columns(2)
                with col1:
                    st.image(image, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_container_width=True)
                with col2:
                    st.image(mask, caption="–ú–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏", use_container_width=True)

                buf = BytesIO()
                mask.save(buf, format="PNG")
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –º–∞—Å–∫—É",
                    data=buf.getvalue(),
                    file_name=f"mask_{file.name}.png",
                    mime="image/png"
                )

    else:
        url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        if st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ") and url:
            try:
                response = requests.get(url)
                response.raise_for_status()
                image = Image.open(BytesIO(response.content)).convert("RGB")
                mask = run_unet_segmentation(image)

                col1, col2 = st.columns(2)
                with col1:
                    st.image(image, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_container_width=True)
                with col2:
                    st.image(mask, caption="–ú–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏", use_container_width=True)

                buf = BytesIO()
                mask.save(buf, format="PNG")
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –º–∞—Å–∫—É",
                    data=buf.getvalue(),
                    file_name="mask_from_url.png",
                    mime="image/png"
                )
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

with tab2:
    st.header("U-Net –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
    st.markdown("""
    - **–ú–æ–¥–µ–ª—å**: UNet (–Ω–∞ –æ—Å–Ω–æ–≤–µ ResNet34 encoder)
    - **–¢–∏–ø –∑–∞–¥–∞—á–∏**: –ë–∏–Ω–∞—Ä–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–µ—Å / –Ω–µ –ª–µ—Å)
    - **mAP**: 0.74  
    - **IoU (Jaccard)**: 0.77
    - **–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**: RGB (256x256)
    """)
    st.image("assets/map_stats_unet.png", caption="PR / IoU / F1-–≥—Ä–∞—Ñ–∏–∫–∏")
